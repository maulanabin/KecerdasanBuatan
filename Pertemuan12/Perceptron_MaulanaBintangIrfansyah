{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Perceptron_MaulanaBintangIrfansyah","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOwB2B6//TQVyEZ3U/7Qy69"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"QdxzxrG6QIDA"},"source":["**Perceptron**"]},{"cell_type":"code","metadata":{"id":"RXewwPXRRBA8"},"source":["# Maulana Bintang Irfansyah - 15 - TI 2H\n","def predict(row, weights):\n","  activation = weights[0]\n","  for i in range(len(row)-1):\n","    activation += weights[i + 1] * row[i]\n","  return 1.0 if activation >= 0.0 else 0.0"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GBfOJwgzSYdS"},"source":["import numpy as np\n","arr_error = []\n","def train_weights(train, l_rate, n_epoch):\n","  weights = [0.0 for i in range(len(train[0]))]\n","  for epoch in range(n_epoch):\n","    sum_error = 0.0\n","    for row in train:\n","      prediction = predict(row, weights)\n","      error = row[-1] - prediction\n","      sum_error += error**2\n","      weights[0] = weights[0] + l_rate * error\n","      for i in range(len(row)-1):\n","        weights[i + 1] = weights[i + 1] + l_rate * error * row[i]\n","    print('>epoch=%d, lrate=%.3f, error=%.3f' % (epoch, l_rate, sum_error))\n","    arr_error.append(sum_error)\n","  return weights, arr_error"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TCEn_OxMTiHR"},"source":["# Contoh Kasus OR\n","# Kolom pertama = X1, Kolom kedua = X2, Kolom ketiga = target (label kelas)\n","dataset = [[1, 1, 1], \n","           [1, 0, 1],\n","           [0, 1, 1],\n","           [0, 0, 0]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"SK80iRo9UdiW","executionInfo":{"status":"ok","timestamp":1637852052798,"user_tz":-420,"elapsed":525,"user":{"displayName":"Maulana Bintang Irfansyah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj4vWMh54PrEgTpteGoVB3PfA4lfzum2P4ifkz2rw=s64","userId":"07418099166609853708"}},"outputId":"bfa23158-b943-4110-9b63-7be649733672"},"source":["weights = [0, 0, 0] #bias, w1, w2\n","l_rate = 1\n","n_epoch = 7\n","weights, arr_error = train_weights(dataset, l_rate, n_epoch)\n","print(weights)\n","\n","# visualisasi\n","import matplotlib.pyplot as plt\n","plt.plot(arr_error)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[">epoch=0, lrate=1.000, error=1.000\n",">epoch=1, lrate=1.000, error=2.000\n",">epoch=2, lrate=1.000, error=0.000\n",">epoch=3, lrate=1.000, error=0.000\n",">epoch=4, lrate=1.000, error=0.000\n",">epoch=5, lrate=1.000, error=0.000\n",">epoch=6, lrate=1.000, error=0.000\n","[-1.0, 1.0, 1.0]\n"]},{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f06cee8cd90>]"]},"metadata":{},"execution_count":4},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q8yNPCHqVBG2","executionInfo":{"status":"ok","timestamp":1637764675487,"user_tz":-420,"elapsed":598,"user":{"displayName":"Maulana Bintang Irfansyah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj4vWMh54PrEgTpteGoVB3PfA4lfzum2P4ifkz2rw=s64","userId":"07418099166609853708"}},"outputId":"826c1c4f-945a-4e70-f325-02a2f09e011e"},"source":["Nweights = [-1, 1, 1]\n","for row in dataset:\n","    prediction = predict(row, weights)\n","    print(\"Expected=%d, Predicted=%d\" % (row[-1], prediction))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Expected=1, Predicted=1\n","Expected=1, Predicted=1\n","Expected=1, Predicted=1\n","Expected=0, Predicted=0\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GOoVG_IxVU2X","executionInfo":{"status":"ok","timestamp":1637764706688,"user_tz":-420,"elapsed":724,"user":{"displayName":"Maulana Bintang Irfansyah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj4vWMh54PrEgTpteGoVB3PfA4lfzum2P4ifkz2rw=s64","userId":"07418099166609853708"}},"outputId":"08056c63-9c7c-4a88-dccc-10c86cd01c9f"},"source":["Nweights = [-1, 1, 1]\n","datatest = [[1, 0, 1]]\n","for row in datatest:\n","  prediction = predict(row, weights)\n","  print(\"Expected=%d, Predicted=%d\" % (row[-1], prediction))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Expected=1, Predicted=1\n"]}]},{"cell_type":"markdown","metadata":{"id":"nCRDZkEQkphw"},"source":["**TUGAS - Perceptron dengan Logika AND**"]},{"cell_type":"code","metadata":{"id":"oNn92CB6ku_h","executionInfo":{"status":"ok","timestamp":1637906453538,"user_tz":-420,"elapsed":6,"user":{"displayName":"Maulana Bintang Irfansyah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj4vWMh54PrEgTpteGoVB3PfA4lfzum2P4ifkz2rw=s64","userId":"07418099166609853708"}}},"source":["# Maulana Bintang Irfansyah - 15 - TI 2H\n","def predict(row, weights):\n","  activation = weights[0]\n","  for i in range(len(row)-1):\n","    activation += weights[i + 1] * row[i]\n","  return 1.0 if activation >= 0.0 else 0.0"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"yozRCz_Ykzwf","executionInfo":{"status":"ok","timestamp":1637906032657,"user_tz":-420,"elapsed":4,"user":{"displayName":"Maulana Bintang Irfansyah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj4vWMh54PrEgTpteGoVB3PfA4lfzum2P4ifkz2rw=s64","userId":"07418099166609853708"}}},"source":["import numpy as np\n","arr_error = []\n","def train_weights(train, l_rate, n_epoch):\n","  weights = [0.0 for i in range(len(train[0]))]\n","  for epoch in range(n_epoch):\n","    sum_error = 0.0\n","    for row in train:\n","      prediction = predict(row, weights)\n","      error = row[-1] - prediction\n","      sum_error += error**2\n","      weights[0] = weights[0] + l_rate * error\n","      for i in range(len(row)-1):\n","        weights[i + 1] = weights[i + 1] + l_rate * error * row[i]\n","    print('>epoch=%d, lrate=%.3f, error=%.3f' % (epoch, l_rate, sum_error))\n","    arr_error.append(sum_error)\n","  return weights, arr_error"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"EU07HLQmk0W-","executionInfo":{"status":"ok","timestamp":1637906036125,"user_tz":-420,"elapsed":705,"user":{"displayName":"Maulana Bintang Irfansyah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj4vWMh54PrEgTpteGoVB3PfA4lfzum2P4ifkz2rw=s64","userId":"07418099166609853708"}}},"source":["# Contoh Kasus AND\n","# Kolom pertama = X1, Kolom kedua = X2, Kolom ketiga = target (label kelas)\n","dataset = [[1, 1, 1], \n","           [1, 0, 0],\n","           [0, 1, 0],\n","           [0, 0, 0]]"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"2lU3otMsk3ey","executionInfo":{"status":"ok","timestamp":1637906037286,"user_tz":-420,"elapsed":8,"user":{"displayName":"Maulana Bintang Irfansyah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj4vWMh54PrEgTpteGoVB3PfA4lfzum2P4ifkz2rw=s64","userId":"07418099166609853708"}},"outputId":"cd99cc5d-3bdc-46db-c1e4-9d5bc313940f"},"source":["weights = [0, 0, 0] #bias, w1, w2\n","l_rate = 1\n","n_epoch = 8\n","weights, arr_error = train_weights(dataset, l_rate, n_epoch)\n","print(weights)\n","\n","# visualisasi\n","import matplotlib.pyplot as plt\n","plt.plot(arr_error)"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":[">epoch=0, lrate=1.000, error=1.000\n",">epoch=1, lrate=1.000, error=3.000\n",">epoch=2, lrate=1.000, error=2.000\n",">epoch=3, lrate=1.000, error=2.000\n",">epoch=4, lrate=1.000, error=3.000\n",">epoch=5, lrate=1.000, error=2.000\n",">epoch=6, lrate=1.000, error=2.000\n",">epoch=7, lrate=1.000, error=0.000\n","[-3.0, 1.0, 2.0]\n"]},{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f65d80f4ed0>]"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wSfs8ywNk7PA","executionInfo":{"status":"ok","timestamp":1637906039148,"user_tz":-420,"elapsed":5,"user":{"displayName":"Maulana Bintang Irfansyah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj4vWMh54PrEgTpteGoVB3PfA4lfzum2P4ifkz2rw=s64","userId":"07418099166609853708"}},"outputId":"f0e3fa08-ba0b-4811-b7d8-22bd3d6cb7b6"},"source":["Nweights = [-1, 1, 1]\n","for row in dataset:\n","    prediction = predict(row, weights)\n","    print(\"Expected=%d, Predicted=%d\" % (row[-1], prediction))"],"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Expected=1, Predicted=1\n","Expected=0, Predicted=0\n","Expected=0, Predicted=0\n","Expected=0, Predicted=0\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QWQdQaxqk-F_","executionInfo":{"status":"ok","timestamp":1637905881416,"user_tz":-420,"elapsed":1081,"user":{"displayName":"Maulana Bintang Irfansyah","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj4vWMh54PrEgTpteGoVB3PfA4lfzum2P4ifkz2rw=s64","userId":"07418099166609853708"}},"outputId":"30f73e9c-4302-46ee-9a91-c40a1e7efe85"},"source":["Nweights = [-1, 1, 1]\n","datatest = [[1, 1, 1]]\n","for row in datatest:\n","  prediction = predict(row, weights)\n","  print(\"Expected=%d, Predicted=%d\" % (row[-1], prediction))"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Expected=1, Predicted=1\n"]}]}]}